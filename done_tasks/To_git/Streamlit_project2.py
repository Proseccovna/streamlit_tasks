import numpy as np
import pandas as pd

import matplotlib as mpl
import matplotlib.pyplot as plt

import streamlit as st
import plotly_express as px
from plotly.tools import mpl_to_plotly
import io
import imageio

def load_data():
    return pd.read_csv('boston.csv')
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data() 

st.title('–†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞—Å–µ—Ç–æ–º __')

st.sidebar.header('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É')
page = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["–ì–ª–∞–≤–Ω–∞—è", "Preprocessing –∏ Feature engineering", "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è", "–ò—Ç–æ–≥–∏"])

# –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if page == "–ì–ª–∞–≤–Ω–∞—è":
    st.header('–í—ã–ø–æ–ª–Ω–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ "LightGBM":')
    st.subheader('üê±–ê–ª–µ–∫—Å–µ–π2 (–Ω–æ –¥–ª—è –Ω–∞—Å –æ–Ω ‚Ññ1)')
    st.subheader('üê±–ê–ª–∏—Å–∞')
    st.subheader('üê±–¢–∞—Ç–∞')
    st.header('–ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç')
#     df = pd.read_csv('boston.csv')
    nan_columns = df.columns[df.isna().any()]
    nan_counts = df[nan_columns].isna().sum()
    nan_info_df = pd.DataFrame({'Column': nan_columns, 'NaN Count': nan_counts})
    st.write(nan_info_df)
    
    st.subheader('–†–∞–∑–º–µ—Ä: 1460—Ö81')
    st.subheader('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏: 43')
    for i in range(0, len(df.columns), 8):
        interval_columns = df.columns[i:i + 8]
        interval_dtypes = df[interval_columns].dtypes
        interval_dtypes_filtered = interval_dtypes[interval_dtypes.isin(['int64', 'float64'])]
        st.write(pd.DataFrame(interval_dtypes).transpose())


elif page == "Preprocessing –∏ Feature engineering":
    parts = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª", ["Preprocessing", "Feature engineering"])
    if parts == 'Preprocessing':
        st.subheader("–ß–∞—Å—Ç—å 1 - Preprocessing –æ—Ç –ê–ª–∏—Å—ã")
        st.markdown("*1. –ß–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç NaN-–∑–Ω–∞—á–µ–Ω–∏–π*")
        st.markdown("*2. –ë–æ—Ä—å–±–∞ –ø—Ä–æ—Ç–∏–≤ –≤—ã–±—Ä–æ—Å–æ–≤: –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ 99-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å –∑–∞–º–µ–Ω–∏–ª–∏ –Ω–∞ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ*")
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç NaN –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–µ–π
        # df = pd.read_csv('boston.csv')
        df_clean = df['LotFrontage'].dropna()

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º 95-–π –∏ 99-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª–∏ –¥–ª—è 'LotFrontage'
        percentile_95 = np.percentile(df_clean, 95)
        percentile_99 = np.percentile(df_clean, 99)

# –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å—Å–µ–∏–≤–∞–Ω–∏—è
        fig, ax = plt.subplots(figsize=(10, 5))


        ax.axhline(y=percentile_95, color='red', linestyle='--', label=f'95th percentile: {percentile_95}')
        ax.axhline(y=percentile_99, color='blue', linestyle='--', label=f'99th percentile: {percentile_99}')

# –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è x-–æ—Å–∏
        index = np.arange(len(df_clean))
        ax.scatter(index, df_clean, alpha=0.5)
        ax.set_title('Lot Frontage Percentiles')
        ax.set_xlabel('Index')
        ax.set_ylabel('Lot Frontage')
        ax.legend()

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        st.pyplot(fig)
        image1 = imageio.imread('Screenshot1.png')[:, :, :]
        st.image(image1, caption="Caption")
        st.markdown("*3. –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–æ—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –µ—â–µ –∫–æ–µ-—á—Ç–æ*")


        st.subheader("–ß–∞—Å—Ç—å 2 - Preprocessing –æ—Ç –ê–ª–µ–∫—Å–µ—è (aka –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–æ–¥–≤–∞–ª–æ–≤)")
        st.markdown("*1. –ß–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç NaN-–∑–Ω–∞—á–µ–Ω–∏–π*")
        st.markdown("*2. –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –∫–æ—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –µ—â–µ –∫–æ–µ-—á—Ç–æ:*")
        st.write("–ü–æ–¥–≤–∞–ª—å–Ω—ã–µ –¥–µ–ª–∞")
        image4 = imageio.imread('Screenshot4.png')[:, :, :]
        st.image(image4, caption="Caption")

        st.markdown("*3. –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞—Ç—å –≤–∞–Ω–Ω—ã –∏–∑ –ø–æ–¥–≤–∞–ª–∞:*")
        image5 = imageio.imread('Screenshot5.png')[:, :, :]
        st.image(image5, caption="Caption")


        st.subheader("–ß–∞—Å—Ç—å 3 - Preprocessing –æ—Ç –¢–∞—Ç—ã")
        st.markdown("*1. –ß–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç NaN-–∑–Ω–∞—á–µ–Ω–∏–π*")
        st.markdown("*2. –ö–æ–¥–∏—Ä–æ–≤–∫–∞ –æ—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –µ—â–µ –∫–æ–µ-—á—Ç–æ:*")
        st.write("–í  GarageYrBlt —Å–¥–µ–ª–∞–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—Ç—Ä–µ–∑–∫–∏ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:")
        st.write("1 - —Ä–∞–Ω–µ–µ 1950")
        st.write("2 - 1951-1970")
        st.write("3 - 1971 -1990")
        st.write("4 - 1991 -2010")
        garage_year = df['GarageYrBlt'] 
        st.subheader("–ë—ã–ª–æ")
        fig1 = px.scatter(df, x=df.index, y='GarageYrBlt', color_discrete_sequence=['red'], opacity=0.5)
        fig1.update_layout(xaxis_title='ID', yaxis_title='Year', title='GarageYrBlt')
        st.plotly_chart(fig1)

        df['GarageYrBlt'] = df['GarageYrBlt'].fillna(0)
        bins = [0, 1800, 1950, 1970, 1990, 2010]
        labels = ['0', '1', '2', '3', '4']
        df['GarageYrBlt'] = pd.cut(df['GarageYrBlt'], bins=bins, labels=labels, include_lowest=True)
        garage_year = df['GarageYrBlt'] 
        st.subheader("–°—Ç–∞–ª–æ")
        fig2 = px.scatter(df, x=df.index, y='GarageYrBlt', color_discrete_sequence=['green'])
        fig2.update_layout(xaxis_title='ID', yaxis_title='Year', title='GarageYrBlt')
        st.plotly_chart(fig2)

        st.markdown("*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 2 –≤ 1:*")
        st.write('–°—Ö–ª–æ–ø–Ω—É–ª–∏ —Ñ–∏—á–∏ "–¥–ª—è –±–æ–≥–∞—Ç—ã—Ö"')
        image2 = imageio.imread('Screenshot2.png')[:, :, :]
        st.image(image2, caption="Caption")
        image9 = imageio.imread('cat3.png')[:, :, :]
        st.image(image9, caption="Caption")
        st.markdown("*–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ 5 –≤ 1: (—Å–ø–æ–π–ª–µ—Ä - —Ç–∞–∫–æ–µ –Ω–∏–∫–æ–º—É –Ω–µ –Ω–∞–¥–æ)*")
        image3 = imageio.imread('Screenshot3.png')[:, :, :]
        st.image(image3, caption="Caption")
        st.write('–ö–æ–º–º–µ–Ω—Ç by –ê–ª–∏—Å–∞ —á–µ—Ç–∫–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —ç—Ç–∏–º —Ñ–∏—á–∞–º')
        st.markdown("# **üöÄ –í–∂—É—Ö!**")
    if parts == 'Feature engineering':
        st.subheader("–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∏—á–∏")
        image6 = imageio.imread('Screenshot6.png')[:, :, :]
        st.image(image6, caption="Caption")
        st.markdown("# **üöÄ –í–∂—É—Ö!**")
elif page == "–ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è":
    st.subheader("–õ–µ—à–∞ –∏ –ê–ª–∏—Å–∞, —Å—Ç—Ä–∞–¥–∞—é—â–∏–µ –Ω–∞–¥ –º–æ–¥–µ–ª—å—é")
    image7 = imageio.imread('crying_cats.png')[:, :, :]
    st.image(image7, caption="Caption")
    st.subheader("–¢–µ–º –≤—Ä–µ–º–µ–Ω–µ–º –¢–∞—Ç–∞ , –ø–∏–ª—è—â–∞—è –°—Ç—Ä–∏–º–ª–∏—Ç")
    image8 = imageio.imread('cat1.png')[:, :, :]
    st.image(image8, caption="Caption")
    
    st.header('–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π:')
    # 1) –ó–∞–ø—É—Å—Ç–∏–ª–∏ Catboost —Ä–µ–≥—Ä–µ—Å—Å–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    st.subheader("1. CatBoost —Ä–µ–≥—Ä–µ—Å—Å–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
    st.text("–†–µ–∑—É–ª—å—Ç–∞—Ç: 0.1356")

    # 2) –ü–æ—Ç—é–Ω–∏–ª–∏ Catboost —á–µ—Ä–µ–∑ –≥—Ä–∏–¥—Å—ë—Ä—á, –∑–∞–ø—É—Å—Ç–∏–ª–∏ - 0.1356
    st.subheader("2. –¢—é–Ω–∏–Ω–≥ CatBoost —á–µ—Ä–µ–∑ GridSearchCV")
    st.markdown("–†–µ–∑—É–ª—å—Ç–∞—Ç: 0.1356")

    # 3) –ü–æ–∏–≥—Ä–∞–ª–∏—Å—å —Å RF, LinReg, Catboost –∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏
    st.subheader("3. –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏")
    st.markdown("–†–µ–∑—É–ª—å—Ç–∞—Ç: 0.14256-14357")

    # 4) –ó–∞—Ç—é–Ω–∏–ª–∏ —á–µ—Ä–µ–∑ –≥—Ä–∏–¥—Å—ë—Ä—á RF
    st.subheader("4. –¢—é–Ω–∏–Ω–≥ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞ (RandomForest) —á–µ—Ä–µ–∑ GridSearchCV")
    st.markdown("–†–µ–∑—É–ª—å—Ç–∞—Ç: 0.14632")

    # 5) –ó–∞–ø—É—Å—Ç–∏–ª–∏ —Å—Ç–µ–∫–∏–Ω–≥ (–õ–∏–Ω–†–µ–≥ + –ö—ç—Ç–±—É—Å—Ç + RF) = 0.1327
    st.subheader("5. –ó–∞–ø—É—Å–∫ Stacking (LinReg + CatBoost + RandomForest)")
    st.markdown("–†–µ–∑—É–ª—å—Ç–∞—Ç: 0.1327")

    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    st.subheader("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ")
    st.markdown("–†–µ—à–∏–ª–∏ –¥–∞–ª—å—à–µ –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∏—á–∞–º–∏ –∏, –ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ, –æ–±–æ—Å—Ä–∞–ª–∏—Å—å.")
    st.markdown("# **üöÄ –í–∂—É—Ö!**")

elif page == "–ò—Ç–æ–≥–∏":
    st.header("–õ—É—á—à–∞—è –º–æ–¥–µ–ª—å:")
    st.subheader('üê± *CatBoostRegressor (CatBoost)*)')
    st.header('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏:')
    st.subheader('*depth=5*') 
    st.subheader('*iterations=1000*')
    st.subheader('*l2_leaf_reg=2*')
    st.subheader('*learning_rate=0.05*')
    st.subheader('*verbose=0*')
    st.header("–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ Kaggle:")
    image10 = imageio.imread('10.png')[:, :, :]
    st.image(image10, caption="Caption")






